# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [master]
    tags: ["**"]
  pull_request:
    branches: [master, develop]
jobs:
  cs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: .env
        run: php -r "copy('.env.ci', '.env');"
      - name: PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8"
      - name: PHP vendor Cache
        id: cache-vendor
        uses: actions/cache@v2
        with:
          path: ./vendor
          key: ${{ runner.os }}-cache-vendor-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-cache-vendor-
      - name: Composer Install
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install
      - name: phpcs
        run: composer run cs-check
  es:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        if: steps.cache-assets.outputs.cache-hit != 'true'
        uses: actions/setup-node@v2
      - name: npm ci
        if: steps.cache-assets.outputs.cache-hit != 'true'
        run: npm ci
      - name: eslint
        run: npm run es
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: .env
        run: php -r "copy('.env.ci', '.env');"

      - name: Cache build assets
        id: cache-assets
        uses: actions/cache@v2
        env:
          cache-name: cache-assets
        with:
          path: ./public
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup Node
        if: steps.cache-assets.outputs.cache-hit != 'true'
        uses: actions/setup-node@v2
      - name: npm ci
        if: steps.cache-assets.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build Assets
        if: steps.cache-assets.outputs.cache-hit != 'true'
        run: npm run prod

      - name: PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8"
      - name: PHP vendor Cache
        id: cache-vendor
        uses: actions/cache@v2
        with:
          path: ./vendor
          key: ${{ runner.os }}-cache-vendor-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-cache-vendor-
      - name: Composer Install
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install
      - name: Start MySQL
        run: sudo /etc/init.d/mysql start
      - name: Setup database
        run: |
          mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE IF NOT EXISTS test;
            CREATE DATABASE IF NOT EXISTS test_test_1;
            CREATE DATABASE IF NOT EXISTS test_test_2'
      - name: chmod 777
        run: chmod -R 0777 ./
      - name: Test
        run: php artisan test -v --env=local --parallel --processes=2

      - name: Display Error Log
        run: "[ -e storage/logs/laravel.log ] && cat storage/logs/laravel.log || echo 'no log file.'"

  dusk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare The Environment
        run: cp .env.example .env
      - name: Create Database
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="root" -e "CREATE DATABASE 'v2_portal' character set UTF8mb4 collate utf8mb4_bin;"
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      - name: Generate Application Key
        run: php artisan key:generate
      - name: Upgrade Chrome Driver
        run: php artisan dusk:chrome-driver `/opt/google/chrome/chrome --version | cut -d " " -f3 | cut -d "." -f1`
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &
      - name: Run Laravel Server
        run: php artisan serve --no-reload &
      - name: Run Dusk Tests
        env:
          APP_URL: "http://127.0.0.1:8000"
        run: php artisan dusk
      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: tests/Browser/screenshots
      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: console
          path: tests/Browser/console
  deploy:
    # tag push -> テスト通過後デプロイ
    needs: [test, es, cs, dusk]
    if: ${{ success() && startsWith( github.ref, 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: .env
        run: php -r "copy('.env.deploy', '.env');"

      - name: Setup Node
        uses: actions/setup-node@v2
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build Assets
        run: npm run prod

      - name: Install SSH key
        run: mkdir -p ~/.ssh \
          && echo "${{secrets.SSH_KEY}}" > ~/.ssh/id_rsa \
          && chmod 0600 ~/.ssh/id_rsa \
          && echo "${{secrets.KNOWN_HOSTS}}" >> ~/.ssh/known_hosts
      - name: Deploy
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: cd ${{ secrets.APP_DIR }}
            && git fetch -p
            && git checkout ${{ github.ref }}
            && bash -c 'sed -i "" "s/APP_VERSION=.*/APP_VERSION=$( git describe )/" .env'
            && php -c ~/www/php.ini ~/bin/composer.phar install --optimize-autoloader --no-dev
            && php -c ~/www/php.ini artisan migrate --force
            && php -c ~/www/php.ini artisan migrate:status
            && php -c ~/www/php.ini artisan optimize:clear
            && php -c ~/www/php.ini artisan optimize
            && php -c ~/www/php.ini artisan event:cache
            && php -c ~/www/php.ini artisan view:cache
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          privateKey: /home/runner/.ssh/id_rsa

      - name: rsync assets
        run: rsync -ah -e "ssh -i /home/runner/.ssh/id_rsa" ./public/ ${{ secrets.USER }}@${{ secrets.HOST }}:${{ secrets.APP_DIR }}/public
