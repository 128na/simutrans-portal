# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [master]
    tags: ["**"]
  pull_request:
    branches: [master, develop]
jobs:
  pint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: .env
        run: php -r "copy('.env.ci', '.env');"
      - name: PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
      - name: Cache vendor
        id: cache-composer
        uses: actions/cache@v3
        env:
          cache-name: cache-vendor
        with:
          path: ./vendor
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Composer Install
        if: ${{ steps.cache-composer.outputs.cache-hit != 'true' }}
        run: composer install
      - name: pint
        run: composer run pint:check
  stan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: .env
        run: php -r "copy('.env.ci', '.env');"
      - name: PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
      - name: Cache vendor
        id: cache-composer
        uses: actions/cache@v3
        env:
          cache-name: cache-vendor
        with:
          path: ./vendor
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Composer Install
        if: ${{ steps.cache-composer.outputs.cache-hit != 'true' }}
        run: composer install
      - name: stan
        run: composer run stan
  es:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
      - name: Cache frontend_node_modules
        id: frontend-cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: npm ci
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: cd frontend && npm ci
      - name: Build Assets
        run: cd frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: [8.2, 8.3]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: .env
        run: php -r "copy('.env.ci', '.env');"
      - name: PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}
      - name: Cache vendor
        id: cache-composer
        uses: actions/cache@v3
        env:
          cache-name: cache-vendor
        with:
          path: ./vendor
          key: ${{ runner.os }}-build-${{ matrix.php_version }}-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.php_version }}-${{ env.cache-name }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Composer Install
        if: ${{ steps.cache-composer.outputs.cache-hit != 'true' }}
        run: composer install
      - name: Setup Node
        uses: actions/setup-node@v3
      - name: Cache frontend_node_modules
        id: frontend-cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: npm ci
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: cd frontend && npm ci
      - name: Build Assets
        run: cd frontend && npm run build
      - name: Start MySQL
        run: sudo /etc/init.d/mysql start
      - name: Setup database
        run: |
          mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE IF NOT EXISTS test;
            CREATE DATABASE IF NOT EXISTS test_test_1;
            CREATE DATABASE IF NOT EXISTS test_test_2'
      - name: chmod 777
        run: chmod -R 0777 ./
      - name: Test
        run: php artisan test -v --env=local --parallel --processes=2
      - name: Upload Laravel Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: TestLaravelLog
          path: storage/logs

  dusk:
    runs-on: ubuntu-latest
    steps:
      - name: install japanese font
        run: sudo apt-get install -y fonts-ipafont && fc-cache -fv install
      - name: Checkout
        uses: actions/checkout@v3
      - name: .env
        run: php -r "copy('.env.dusk.ci', '.env');copy('frontend/.env.dusk.ci', 'frontend/.env');"
      - name: PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
      - name: Cache vendor
        id: cache-composer
        uses: actions/cache@v3
        env:
          cache-name: cache-vendor
        with:
          path: ./vendor
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Composer Install
        if: ${{ steps.cache-composer.outputs.cache-hit != 'true' }}
        run: composer install
      - name: Setup Node
        uses: actions/setup-node@v3
      - name: Cache frontend_node_modules
        id: frontend-cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: npm ci
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: cd frontend && npm ci
      - name: Build Assets
        run: cd frontend && npm run build
      - name: Start MySQL
        run: sudo /etc/init.d/mysql start
      - name: Setup database
        run: |
          mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE IF NOT EXISTS test;'
      - name: chmod 777
        run: chmod -R 0777 ./
      - name: Storage link
        run: php artisan storage:link
      - name: Upgrade Chrome Driver
        run: php artisan dusk:chrome-driver --detect
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &
      - name: Run Laravel Server
        run: php -S 127.0.0.1:8000 -t public/ > /dev/null 2>&1 &
      - name: Run Dusk Tests
        run: |
          chmod -R 0755 vendor/laravel/dusk/bin/
          php artisan dusk
      - name: Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: tests/Browser/screenshots
      - name: Upload Console Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: console
          path: tests/Browser/console
      - name: Upload Laravel Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: DuskLaravelLog
          path: storage/logs

  cy:
    runs-on: ubuntu-latest
    steps:
      - name: install japanese font
        run: sudo apt-get install -y fonts-ipafont && fc-cache -fv install
      - name: Checkout
        uses: actions/checkout@v3
      - name: .env
        run: php -r "copy('frontend/.env.dusk.ci', 'frontend/.env');"
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          # 18だとcypressが起動しない
          node-version: 16
      - name: Cache frontend_node_modules
        id: frontend-cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: npm ci
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: cd frontend && npm ci
      - name: Run Cypress
        run: cd frontend && npm run test:e2e:ci

  deploy:
    # tag push -> テスト通過後デプロイ
    needs: [test, es, pint, stan, dusk, cy]
    if: ${{ success() && startsWith( github.ref, 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: .env
        run: php -r "copy('.env.deploy', '.env');copy('frontend/.env.deploy', 'frontend/.env');"
      - name: set app version
        run: sed -i "s/APP_VERSION=.*/APP_VERSION=$( git describe --tags --abbrev=0 )/" frontend/.env
      - name: Setup Node
        uses: actions/setup-node@v3
      - name: Cache frontend_node_modules
        id: frontend-cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: npm ci
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: cd frontend && npm ci
      - name: Build Assets
        run: cd frontend && npm run build

      - name: Install SSH key
        run: >
          mkdir -p ~/.ssh
          && echo "${{secrets.SSH_KEY}}" > ~/.ssh/id_rsa
          && chmod 0600 ~/.ssh/id_rsa
          && echo "${{secrets.KNOWN_HOSTS}}" >> ~/.ssh/known_hosts
      - name: Deploy
        run: >
          ssh -i /home/runner/.ssh/id_rsa ${{ secrets.USER }}@${{ secrets.HOST }} "
          cd ${{ secrets.APP_DIR }}
          && git fetch -p
          && git checkout ${{ github.ref }}
          && bash -c 'sed -i ".bak" "s/APP_VERSION=.*/APP_VERSION=$( git describe --tags --abbrev=0 )/" .env'
          && php -c ~/www/php.ini ~/bin/composer.phar install --optimize-autoloader --no-dev
          && php -c ~/www/php.ini artisan migrate --force
          && php -c ~/www/php.ini artisan migrate:status
          && php -c ~/www/php.ini artisan optimize:clear
          && php -c ~/www/php.ini artisan optimize
          && php -c ~/www/php.ini artisan event:cache
          && php -c ~/www/php.ini artisan view:cache
          && php -c ~/www/php.ini artisan json:generate"

      - name: rsync assets
        run: >
          rsync -ah -e "ssh -i /home/runner/.ssh/id_rsa" ./public/
          ${{ secrets.USER }}@${{ secrets.HOST }}:${{ secrets.APP_DIR }}/public

      - name: publish sourcemap to newrelic
        run: cd frontend && npm run nr:s
        env:
          NR_USER_KEY: ${{secrets.NR_USER_KEY}}
